/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.3.3/userguide/building_java_projects.html
 */

plugins {
    //Kotlin
    id 'org.jetbrains.kotlin.jvm' version "$kotlinVersion"
	id "org.jetbrains.kotlin.plugin.allopen" version "$kotlinVersion"
	id "org.jetbrains.kotlin.plugin.noarg" version "$kotlinVersion"
    id "org.jetbrains.kotlin.plugin.jpa" version "$kotlinVersion"

    // Apply the application plugin to add support for building a CLI application in Java.
    id 'java'
	id 'java-library'
	id 'war'
	id 'ear'
	id 'eclipse'
}

def wildfly_home="C:/Wildfly"
def deploy_name = "distributed-systems-demo"

allOpen {
    annotation("jakarta.persistence.Entity")
    annotation("jakarta.persistence.MappedSuperclass")
    annotation("jakarta.persistence.Embeddable")
}

sourceSets {
    main.java.srcDirs = []
    main.kotlin.srcDirs = ['src/main/java', 'src/main/kotlin']
    main.resources.srcDirs = ['src/main/resources']
}

compileJava {
    sourceCompatibility = '11'
    targetCompatibility = '11'
}

compileKotlin {
    sourceCompatibility = '11'
    targetCompatibility = '11'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    /* KOTLIN *********************************************************************************************** */
    // Align versions of all Kotlin components
    implementation platform('org.jetbrains.kotlin:kotlin-bom')

    // Use the Kotlin JDK 8 standard library.
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'

    // Use the Kotlin test library.
    testImplementation 'org.jetbrains.kotlin:kotlin-test'

    // Use the Kotlin JUnit integration.
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit'

    // Use JUnit test framework.
    testImplementation 'junit:junit:4.13.2'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:30.1.1-jre'
	
	/* EJB ************************************************************************************************** */
	// https://mvnrepository.com/artifact/jakarta.persistence/jakarta.persistence-api
	implementation group: 'jakarta.persistence', name: 'jakarta.persistence-api', version: '3.1.0-RC2'
	// https://mvnrepository.com/artifact/jakarta.ejb/jakarta.ejb-api
	implementation group: 'jakarta.ejb', name: 'jakarta.ejb-api', version: '4.0.0'
	// https://mvnrepository.com/artifact/jakarta.interceptor/jakarta.interceptor-api
	implementation group: 'jakarta.interceptor', name: 'jakarta.interceptor-api', version: '2.1.0-RC3'
	// https://mvnrepository.com/artifact/jakarta.jms/jakarta.jms-api
	implementation group: 'jakarta.jms', name: 'jakarta.jms-api', version: '3.0.0'
	// https://mvnrepository.com/artifact/jakarta.annotation/jakarta.annotation-api
	implementation group: 'jakarta.annotation', name: 'jakarta.annotation-api', version: '2.1.0-B1'
	// https://mvnrepository.com/artifact/jakarta.servlet/jakarta.servlet-api
	implementation group: 'jakarta.servlet', name: 'jakarta.servlet-api', version: '5.0.0'
	// https://mvnrepository.com/artifact/jakarta.validation/jakarta.validation-api
	implementation group: 'jakarta.validation', name: 'jakarta.validation-api', version: '3.0.1'
	// https://mvnrepository.com/artifact/jakarta.inject/jakarta.inject-api
	implementation group: 'jakarta.inject', name: 'jakarta.inject-api', version: '2.0.1'
	
	/* JAKARTA ********************************************************************************************* */
	// https://mvnrepository.com/artifact/jakarta.enterprise/jakarta.enterprise.cdi-api
	implementation group: 'jakarta.enterprise', name: 'jakarta.enterprise.cdi-api', version: '4.0.0-RC5'
	// https://mvnrepository.com/artifact/jakarta.platform/jakarta.jakartaee-api
	implementation group: 'jakarta.platform', name: 'jakarta.jakartaee-api', version: '9.1.0'
	// https://mvnrepository.com/artifact/jakarta.platform/jakarta.jakartaee-web-api
	implementation group: 'jakarta.platform', name: 'jakarta.jakartaee-web-api', version: '9.1.0'
	
	/* JBOSS ************************************************************************************************ */
	// https://mvnrepository.com/artifact/org.wildfly/wildfly-spec-api
	implementation group: 'org.wildfly', name: 'wildfly-spec-api', version: '26.0.1.Final', ext: 'pom'
	
	/* EAR ************************************************************************************************** */
	deploy files(war)
    deploy files(jar)
	// The following dependencies will become ear libs and will be placed in a dir configured via the libDirName property
    earlib group: 'log4j', name: 'log4j', version: '1.2.15', ext: 'jar'
	
	/* HIBERNATE ******************************************************************************************** */
	// https://mvnrepository.com/artifact/org.hibernate/hibernate-core-jakarta
	implementation group: 'org.hibernate', name: 'hibernate-core-jakarta', version: '5.6.5.Final'
	// https://mvnrepository.com/artifact/mysql/mysql-connector-java
	implementation group: 'mysql', name: 'mysql-connector-java', version: '8.0.28'
	// https://mvnrepository.com/artifact/org.glassfish.jaxb/jaxb-runtime
	implementation group: 'org.glassfish.jaxb', name: 'jaxb-runtime', version: '3.0.2'
	
	/* LOGGING ********************************************************************************************** */
	// https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core
	implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.17.1'
	// https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-api
	implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.17.1'

	task deployEar( ){

        println("running dependencies.....")
        dependsOn('ear')

        println("dependencies resolved.....")

        println("deployin war package.....")

        println("deleting old deployments.....")
        delete("$wildfly_home/standalone/deployments/${deploy_name}.ear")
        println("old depployments deleted.....")

        copy(){
            from "$buildDir/libs/${deploy_name}.ear"
            into "$wildfly_home/standalone/deployments/"
        }

        println("Application deployed!")
    }

    task testintellijcommit(){

        println("works!")
    }
    
	// WAR SECTION ---------------------------------------------------------------------------------
    task prepareWar(){

//    dependsOn('clean')
//    dependsOn('build')

        doLast {
            println("Preparing WAR file...")

            //PAGES
            copy {
                from "$projectDir/src/main/webapp/index.jsp"
                into "$buildDir/tmp/war"
            }

            //WEB.XML
            copy {
                from "$projectDir/src/main/webapp/WEB-INF/web.xml"
                into "$buildDir/tmp/war/WEB-INF/"
            }

            /*
            // HIBERNATE.CFG.XML
            copy {
                from "$projectDir/src/main/java/hibernate.cfg.xml"
                into "$buildDir/tmp/war/WEB-INF/"
            }
            */

            //CLASSES
            copy {
                from "$buildDir/classes/java/main/"
                into "$buildDir/tmp/war/WEB-INF/classes/"
            }

            //EVENTUALLY - LIBS
//    copy {
//        from "$buildDir/libs("
//        into "$buildDir/tmp/war/WEB-INF/libs"
//    }

            //EVENTUALLY - TAGS
//    copy {
//        from "$buildDir/tags"
//        into "$buildDir/tmp/war/WEB-INF/tags"
//    }
        }
    }

    war {

//   dependsOn('prepareWar')

        from 'src/webapp' // adds a file-set to the root of the archive
        //from 'tmp/war'
        include "*.cfg.xml"
        include "*.jsp"
    }


// EAR SECTION ---------------------------------------------------------------------------------

    task prepareEar(){

//    dependsOn('clean')
//    dependsOn('build')
//    dependsOn('prepareWar')
//    dependsOn('war')

        doLast {
            println("Preparing EAR file...")

            // META-INF
//        copy {
//            from "$buildDir/tmp/ear/application.xml"
//            into "$buildDir/tmp/ear/META-INF"
//        }
            copy {
                from "$projectDir/settings/application.xml"
                into "$buildDir/tmp/ear/MATA-INF/"
            }

            /*
            copy {
                from "$projectDir/settings/jboss-app.xml"
                into "$buildDir/tmp/ear/MATA-INF/"
            }
            */

            //delete "$buildDir/tmp/ear/application.xml"

            // WAR
            copy {
                from "$buildDir/libs/${deploy_name}.war"
                into "$buildDir/tmp/ear"
            }

            // JAR
//        copy {
//            from "$buildDir/libs/$deploy_name.war"
//            into "$buildDir/tmp/ear"
//        }

            //EVENTUALLY - LIBS
//    copy {
//        from "$buildDir/libs("
//        into "$buildDir/tmp/war/WEB-INF/libs"
//    }

            //TODO: remember that this must be consistent with the application.xml file!
        }

    }

    ear {

        //dependsOn('war')

//     The Ear plugin adds two dependency configurations: deploy and earlib.
//     All dependencies in the deploy configuration are placed in the root of the EAR archive, and are not transitive.
//     All dependencies in the earlib configuration are placed in the 'lib' directory in the EAR archive and are transitive.
//

        includeEmptyDirs=false
//    from "$buildDir/libs" -> !!!!! WARNING CAUSES A LOOOP !!!!!

        appDirName 'src/main/application'  // use application metadata found in this folder
        // put dependent libraries into APP-INF/lib inside the generated EAR
        libDirName 'lib'
        deploymentDescriptor {  // custom entries for application.xml:
//      fileName = "application.xml"  // same as the default value
//      version = "6"  // same as the default value
            applicationName = "$deploy_name"
            initializeInOrder = true
            displayName = "$deploy_name"  // defaults to project.name
            // defaults to project.description if not set
            description = "My customized EAR for the Gradle documentation"
//      libraryDirectory = "APP-INF/lib"  // not needed, above libDirName setting does this
//      module("my.jar", "java")  // won't deploy as my.jar isn't deploy dependency
//      webModule("$buildDir/libs/$deploy_name.war", "/")  // won't deploy as my.war isn't deploy dependency

//        securityRole "jboss"
//        securityRole "admin"
//        securityRole "superadmin"

//        withXml { provider -> // add a custom node to the XML
//            provider.asNode().appendNode("data-source", "my/data/source")
//        }
        }
    }


// TESTS SECTION -------------------------------------------------------------------------------
    test {
        // Use junit platform for unit tests
        useJUnitPlatform()
    }

// JBOSS SECTION -------------------------------------------------------------------------------

// The provision task will download and install a WildFly server to the target directory,
// while upgrading the two Hibernate ORM libraries and replacing the JPA 2.1 API with the standard JPA 2.2 API.
//provision {
//    //Optional provisioning configuration:
//    //configuration = "./settings/custom-server-provisioning.xml"
//
//    //You can set variables to be injected in the provisioning.xml configuration;
//    //The 'wildfly.version' variable is required by the default configuration:
//    variables['wildfly.version'] = '17.0.0.Final'
//
//    //The default is to add jboss-nexus automatically as you'll likely need it,
//    //yet most builds will want to control such details explicitly.
//    autoAddRepositories = false
//
//    //Optional destination directory:
//    destinationDir = file("./settings/light-wildfly")
//    //Overrides the version of an artifact:
//    override( 'org.hibernate:hibernate-core' ) {
//        version = '5.3.0.Beta1'
//    }
//    override( 'org.hibernate:hibernate-envers' ) {
//        version = '5.3.0.Beta1'
//    }
//    //Overrides version, group, etc.. :
////    override( 'org.hibernate.javax.persistence:hibernate-jpa-2.1-api' ) {
////        groupId = 'javax.persistence'
////        artifactId = 'javax.persistence-api'
////        version = '2.2'
////    }
//}

    task launch_jboss(){

        doLast {
            println("Launcing JBoss...")

            def sout = new StringBuilder(), serr = new StringBuilder()
            def proc = "$wildfly_home/bin/standalone.sh".execute()
            proc.outputStream.close()
            proc.inputStream.eachLine {println it}
            proc.waitFor()
            println "out> $sout err> $serr"
        }
    }
}

